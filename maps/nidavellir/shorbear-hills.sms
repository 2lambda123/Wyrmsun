-- Stratagus Map Setup

LoadTileModels("scripts/tilesets/swamp.lua")

CleanRawTiles()
CleanHexTiles()

HexTiles = {
	{"Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Land",  "Land",  "Land",  "Land",  "Land",  "Land",  "Land",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Tree",  "Land",  "Land",  "Land",  "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Land",  "Tree",  "Tree",  "Rough", "Tree",  "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Land",  "Land",  "Land"},
	{"Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Land",  "Land",  "Land",  "Land",  "Land",  "Land",  "Land",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Tree",  "Land",  "Land",  "Land",  "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Land",  "Tree",  "Tree",  "Tree",  "Tree",  "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Land",  "Land",  "Land"},
	{"Rock",  "Rock",  "Land",  "Land",  "Land",  "Land",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Land",  "Land",  "Land",  "Land",  "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Rough", "Rock",  "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Rough"},
	{"Rock",  "Rock",  "Land",  "Land",  "Land",  "Land",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rock",  "Rock",  "Rough", "Rough", "Rough", "Rough", "Rough", "Rough", "Rough", "Rock",  "Rough", "Rock",  "Rock",  "Rock",  "Rough", "Rock",  "Rough", "Rough", "Land",  "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Land",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock"},
	{"Rock",  "Rock",  "Rock",  "Land",  "Rough", "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Rough", "Rough", "Rock",  "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Land",  "Rough", "Rough", "Rock",  "Rough", "Rough", "Land",  "Land",  "Land",  "Land",  "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rough"},
	{"Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rock",  "Rock",  "Rock",  "Rough", "Land",  "Rough", "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Rough", "Land",  "Land",  "Land",  "Land",  "Rough", "Rock",  "Rough", "Land",  "Tree",  "Tree",  "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Land",  "Land"},
	{"Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Land",  "Rough", "Rough", "Rock",  "Rock",  "Rough", "Land",  "Land",  "Land",  "Land",  "Tree",  "Land",  "Land",  "Rough", "Land",  "Land",  "Tree",  "Tree",  "Rough", "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Rock",  "Rough", "Rough", "Tree",  "Land",  "Land"},
	{"Rock",  "Rock",  "Rough", "Rock",  "Tree",  "Rough", "Rough", "Rough", "Rock",  "Rough", "Rough", "Rough", "Land",  "Land",  "Land",  "Rough", "Rock",  "Rough", "Rough", "Land",  "Land",  "Land",  "Tree",  "Tree",  "Tree",  "Land",  "Tree",  "Tree",  "Tree",  "Tree",  "Tree",  "Rough", "Rough", "Rough", "Land",  "Rough", "Rough", "Rock",  "Tree",  "Land",  "Land",  "Land"},
	{"Rough", "Rough", "Rough", "Tree",  "Land",  "Tree",  "Rough", "Tree",  "Rough", "Rock",  "Rough", "Rough", "Tree",  "Tree",  "Tree",  "Rough", "Rough", "Rough", "Rock",  "Rough", "Rough", "Land",  "Land",  "Tree",  "Tree",  "Tree",  "Tree",  "Tree",  "Tree",  "Tree",  "Tree",  "Tree",  "Rough", "Land",  "Land",  "Land",  "Land",  "Rough", "Land",  "Tree",  "Tree",  "Tree"},
	{"Rough", "Rough", "Rock",  "Rough", "Land",  "Tree",  "Tree",  "Rough", "Rough", "Rough", "Rough", "Rough", "Tree",  "Tree",  "Tree",  "Land",  "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rough", "Land",  "Land",  "Land",  "Land",  "Tree",  "Tree",  "Tree",  "Land",  "Land",  "Rough", "Rock",  "Rough", "Land",  "Tree",  "Land",  "Land",  "Tree",  "Tree",  "Tree",  "Tree"},
	{"Rough", "Rough", "Rock",  "Rough", "Rough", "Land",  "Land",  "Land",  "Rough", "Rough", "Rough", "Rough", "Land",  "Tree",  "Land",  "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Land",  "Rough", "Land",  "Land",  "Tree",  "Land",  "Tree",  "Rough", "Rock",  "Rock",  "Rough", "Land",  "Land",  "Tree",  "Tree",  "Tree",  "Tree",  "Tree",  "Tree"},
	{"Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rough", "Tree",  "Land",  "Rough", "Rock",  "Rock",  "Rough", "Rough", "Land",  "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rock",  "Rough", "Rough", "Land",  "Rough", "Land",  "Rough", "Rock",  "Rock",  "Rough", "Land",  "Land",  "Land",  "Tree",  "Tree",  "Tree",  "Tree",  "Tree"},
	{"Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Tree",  "Tree",  "Land",  "Rough", "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Rock",  "Land",  "Rock",  "Land",  "Land",  "Land",  "Rock",  "Land",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rock",  "Rough", "Rough", "Rough", "Rough", "Rough", "Rough", "Tree",  "Land",  "Land",  "Tree",  "Tree",  "Tree",  "Tree"},
	{"Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Land",  "Tree",  "Land",  "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Land",  "Land",  "Land",  "Land",  "Land",  "Land",  "Land",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Land",  "Rough", "Rock",  "Rough", "Rough", "Land",  "Land",  "Land",  "Land",  "Land"},
	{"Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Land",  "Tree",  "Land",  "Land",  "Rough", "Rock",  "Rock",  "Rock",  "Land",  "Land",  "Land",  "Rough", "Rough", "Land",  "Land",  "Land",  "Land",  "Land",  "Land",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Land",  "Land",  "Rough", "Rock",  "Rock",  "Rough", "Land",  "Land",  "Land",  "Land",  "Land"},
	{"Rock",  "Rock",  "Rough", "Rock",  "Rock",  "Rough", "Land",  "Rough", "Rough", "Land",  "Land",  "Rough", "Rock",  "Rock",  "Land",  "Land",  "Land",  "Land",  "Rough", "Rough", "Rough", "Land",  "Land",  "Land",  "Land",  "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Land",  "Land",  "Land",  "Rough", "Rough", "Rock",  "Rock",  "Rough", "Rough", "Rough", "Rough", "Rough"},
	{"Rough", "Rough", "Land",  "Rough", "Rough", "Rough", "Land",  "Rough", "Land",  "Land",  "Tree",  "Rough", "Rough", "Land",  "Land",  "Land",  "Land",  "Rough", "Land",  "Land",  "Land",  "Rough", "Rough", "Land",  "Rough", "Rough", "Rough", "Rough", "Land",  "Land",  "Tree",  "Tree",  "Tree",  "Land",  "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock"},
	{"Land",  "Land",  "Land",  "Land",  "Land",  "Land",  "Land",  "Land",  "Tree",  "Tree",  "Tree",  "Tree",  "Rock",  "Land",  "Land",  "Land",  "Land",  "Rough", "Land",  "Land",  "Land",  "Rough", "Land",  "Rough", "Land",  "Land",  "Rock",  "Rough", "Rough", "Land",  "Tree",  "Tree",  "Tree",  "Land",  "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rough"},
	{"Land",  "Land",  "Tree",  "Tree",  "Tree",  "Land",  "Rough", "Rough", "Land",  "Land",  "Rough", "Rock",  "Rock",  "Rock",  "Land",  "Land",  "Land",  "Rough", "Rough", "Land",  "Rough", "Rough", "Land",  "Land",  "Land",  "Rock",  "Rock",  "Tree",  "Land",  "Rough", "Rough", "Tree",  "Land",  "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Tree",  "Land"},
	{"Land",  "Land",  "Tree",  "Tree",  "Tree",  "Land",  "Rough", "Rough", "Land",  "Land",  "Rough", "Rock",  "Rock",  "Rock",  "Land",  "Land",  "Rough", "Rough", "Rough", "Rough", "Rough", "Rough", "Rough", "Rough", "Land",  "Rock",  "Rock",  "Rough", "Rough", "Land",  "Rough", "Tree",  "Land",  "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Land",  "Land"},
	{"Land",  "Land",  "Land",  "Tree",  "Tree",  "Tree",  "Land",  "Land",  "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Land",  "Rough", "Land",  "Rough", "Rough", "Rough", "Rough", "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Land",  "Land",  "Rough", "Rough", "Rough", "Rock",  "Rock",  "Rough", "Rough", "Land",  "Land"},
	{"Rough", "Rough", "Rough", "Land",  "Tree",  "Tree",  "Tree",  "Land",  "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Land",  "Land",  "Rough", "Rough", "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Rough", "Land",  "Land",  "Land",  "Rough", "Tree",  "Rock",  "Tree",  "Tree",  "Tree",  "Tree"},
	{"Rock",  "Rock",  "Rough", "Land",  "Land",  "Tree",  "Land",  "Tree",  "Rough", "Rock",  "Rock",  "Rock",  "Rough", "Rock",  "Rough", "Rock",  "Rough", "Land",  "Rock",  "Land",  "Rock",  "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Land",  "Land",  "Land",  "Tree",  "Tree",  "Rough", "Tree",  "Tree",  "Tree",  "Tree"},
	{"Rock",  "Rock",  "Rock",  "Rough", "Tree",  "Land",  "Rough", "Land",  "Rough", "Rough", "Rough", "Rough", "Rough", "Rough", "Rough", "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Water", "Water", "Rough", "Rough", "Rough", "Rough", "Rough", "Rock",  "Rough", "Rough", "Rough", "Land",  "Rough", "Tree",  "Rough", "Rough", "Rough", "Tree",  "Tree",  "Tree"},
	{"Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Rough", "Tree",  "Rough", "Rough", "Rough", "Rough", "Rough", "Rough", "Rough", "Rough", "Land",  "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Water", "Water", "Land",  "Land",  "Land",  "Land",  "Land",  "Rough", "Land",  "Land",  "Rough", "Rough", "Rock",  "Rough", "Rock",  "Rock",  "Rough", "Tree",  "Rough", "Rough"},
	{"Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Land",  "Rough", "Rough", "Rough", "Rock",  "Rock",  "Rough", "Land",  "Rough", "Rough", "Land",  "Land",  "Rough", "Rock",  "Rock",  "Rough", "Rough", "Water", "Water", "Land",  "Land",  "Rough", "Land",  "Rough", "Rough", "Land",  "Land",  "Land",  "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Rock",  "Rock"},
	{"Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Land",  "Land",  "Rough", "Rough", "Rock",  "Rock",  "Rough", "Rough", "Rough", "Rock",  "Rough", "Land",  "Rough", "Rough", "Rock",  "Rough", "Rough", "Water", "Water", "Land",  "Rough", "Rough", "Rough", "Tree",  "Tree",  "Tree",  "Land",  "Rough", "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rough"},
	{"Rough", "Rough", "Rough", "Rough", "Rough", "Land",  "Rough", "Rough", "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Land",  "Land",  "Rough", "Rough", "Water", "Water", "Water", "Tree",  "Land",  "Rough", "Land",  "Rough", "Tree",  "Tree",  "Tree",  "Land",  "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rough"},
	{"Land",  "Land",  "Land",  "Land",  "Land",  "Land",  "Rough", "Land",  "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Land",  "Land",  "Land",  "Land",  "Water", "Water", "Tree",  "Tree",  "Tree",  "Land",  "Land",  "Rough", "Land",  "Tree",  "Tree",  "Tree",  "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Tree"},
	{"Land",  "Land",  "Tree",  "Land",  "Rough", "Rough", "Rough", "Land",  "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Land",  "Land",  "Land",  "Land",  "Water", "Water", "Water", "Tree",  "Tree",  "Tree",  "Land",  "Rough", "Rough", "Land",  "Land",  "Land",  "Rough", "Rock",  "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Tree",  "Tree"},
	{"Tree",  "Tree",  "Tree",  "Rough", "Rough", "Rough", "Rock",  "Rough", "Rough", "Rough", "Rough", "Rough", "Rough", "Rock",  "Rough", "Rough", "Rough", "Rough", "Land",  "Land",  "Tree",  "Water", "Water", "Tree",  "Land",  "Land",  "Land",  "Land",  "Land",  "Rough", "Land",  "Land",  "Tree",  "Rough", "Land",  "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rough", "Tree"},
	{"Tree",  "Tree",  "Tree",  "Rough", "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rough", "Rock",  "Rock",  "Rough", "Rough", "Rock",  "Rough", "Rock",  "Rough", "Land",  "Land",  "Rough", "Rough", "Water", "Rough", "Rough", "Land",  "Land",  "Land",  "Land",  "Rough", "Land",  "Land",  "Tree",  "Tree",  "Land",  "Land",  "Rough", "Rock",  "Rough", "Rough", "Tree",  "Land"},
	{"Tree",  "Tree",  "Land",  "Land",  "Land",  "Rough", "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Rough", "Rock",  "Rough", "Rock",  "Rock",  "Rough", "Rough", "Land",  "Land",  "Rough", "Rough", "Rough", "Water", "Rough", "Land",  "Land",  "Land",  "Land",  "Rough", "Rough", "Land",  "Land",  "Land",  "Land",  "Land",  "Land",  "Rough", "Land",  "Land",  "Tree",  "Tree"},
	{"Rough", "Rough", "Land",  "Land",  "Land",  "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Land",  "Land",  "Tree",  "Land",  "Land",  "Rough", "Rough", "Water", "Rough", "Rough", "Rock",  "Land",  "Land",  "Land",  "Rough", "Land",  "Land",  "Land",  "Land",  "Land",  "Land",  "Land",  "Tree",  "Tree",  "Tree",  "Tree"},
	{"Land",  "Land",  "Land",  "Land",  "Rough", "Rough", "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Tree",  "Land",  "Tree",  "Tree",  "Land",  "Land",  "Land",  "Water", "Water", "Rock",  "Rock",  "Rough", "Land",  "Land",  "Rough", "Land",  "Land",  "Tree",  "Land",  "Land",  "Land",  "Land",  "Land",  "Tree",  "Tree",  "Tree"},
	{"Land",  "Land",  "Land",  "Rough", "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Tree",  "Rough", "Rough", "Tree",  "Land",  "Land",  "Water", "Water", "Water", "Rock",  "Rock",  "Rough", "Land",  "Land",  "Land",  "Rough", "Land",  "Land",  "Land",  "Land",  "Land",  "Land",  "Tree",  "Land",  "Land",  "Land"},
	{"Tree",  "Tree",  "Land",  "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Rough", "Tree",  "Tree",  "Land",  "Water", "Water", "Water", "Rough", "Rock",  "Rough", "Land",  "Tree",  "Tree",  "Land",  "Rough", "Land",  "Land",  "Land",  "Land",  "Land",  "Land",  "Tree",  "Land",  "Land",  "Land"},
	{"Tree",  "Tree",  "Land",  "Land",  "Rough", "Rock",  "Rock",  "Rock",  "Rough", "Rock",  "Rough", "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rough", "Land",  "Tree",  "Rough", "Land",  "Water", "Rough", "Land",  "Land",  "Rough", "Land",  "Land",  "Land",  "Tree",  "Rough", "Rough", "Land",  "Land",  "Land",  "Land",  "Tree",  "Land",  "Land",  "Land",  "Land",  "Land"},
	{"Tree",  "Tree",  "Tree",  "Tree",  "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Rough", "Rough", "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Land",  "Land",  "Water", "Water", "Rough", "Rough", "Land",  "Land",  "Land",  "Land",  "Land",  "Land",  "Rough", "Land",  "Land",  "Land",  "Land",  "Land",  "Tree",  "Tree",  "Land",  "Land",  "Land",  "Land"},
	{"Tree",  "Tree",  "Tree",  "Tree",  "Rock",  "Rock",  "Rock",  "Rough", "Rough", "Rough", "Rough", "Rough", "Rough", "Rock",  "Rock",  "Rock",  "Rock",  "Rough", "Land",  "Land",  "Water", "Water", "Rough", "Rough", "Land",  "Land",  "Land",  "Land",  "Land",  "Land",  "Rough", "Land",  "Land",  "Land",  "Land",  "Land",  "Tree",  "Tree",  "Land",  "Land",  "Land",  "Land"}
}

ConvertHexTiles()

-- Randomly add a few more trees, as the base map has none
--GenerateTrees((Map.Info.MapWidth * Map.Info.MapHeight) / 512, (Map.Info.MapWidth * Map.Info.MapHeight) / 32, 0, Map.Info.MapWidth, 0, Map.Info.MapHeight)

-- adjust a few tiles to make space for the Norlund mead hall
SetRawTile(4, 3, "Rough")
SetRawTile(4, 8, "Rough")
SetRawTile(5, 3, "Rough")
SetRawTile(5, 8, "Rough")
SetRawTile(8, 3, "Rough")
SetRawTile(9, 3, "Rough")

AdjustTransitions(0, Map.Info.MapWidth - 1, 0, Map.Info.MapHeight - 1)

-- rectify hex-conversion derived issues
SetRawTile(15, 13, "Rock")
SetRawTile(17, 11, "Rock")
SetRawTile(17, 16, "Rock")
SetRawTile(19, 23, "Rock")
SetRawTile(22, 63, "Rock")
SetRawTile(25, 10, "Rock")
SetRawTile(28, 9, "Rock")
SetRawTile(31, 22, "Rock")
SetRawTile(31, 62, "Rock")
SetRawTile(33, 7, "Rock")
SetRawTile(36, 7, "Rock")
SetRawTile(38, 9, "Rock")
SetRawTile(43, 4, "Rock")
SetRawTile(46, 22, "Rock")
SetRawTile(46, 62, "Water")
SetRawTile(56, 34, "Land")
SetRawTile(58, 34, "Rough")
SetRawTile(66, 4, "Rock")
SetRawTile(74, 12, "Rock")
SetRawTile(80, 52, "Rock")
SetRawTile(81, 5, "Rock")
SetRawTile(81, 31, "Rock")
SetRawTile(82, 51, "Rock")

-- fix trees
SetRawTile(5, 75, "Tree")
SetRawTile(6, 16, "Land")
SetRawTile(7, 16, "Land")
SetRawTile(9, 16, "Tree")
SetRawTile(9, 46, "Land")
SetRawTile(9, 47, "Land")
SetRawTile(14, 15, "Land")
SetRawTile(14, 16, "Land")
SetRawTile(19, 35, "Tree")
SetRawTile(22, 33, "Land")
SetRawTile(40, 61, "Land")
SetRawTile(48, 54, "Tree")
SetRawTile(48, 55, "Tree")
SetRawTile(48, 60, "Tree")
SetRawTile(56, 35, "Tree")
SetRawTile(56, 36, "Tree")
SetRawTile(64, 0, "Land")
SetRawTile(64, 1, "Tree")
SetRawTile(65, 0, "Tree")
SetRawTile(65, 1, "Tree")
SetRawTile(78, 14, "Tree")
SetRawTile(82, 36, "Tree")
SetRawTile(82, 37, "Tree")

-- Shorbear Hold gold mine
SetRawTile(36, 40, "Land")
SetRawTile(36, 41, "Land")

-- Norlund gold mine
SetRawTile(13, 2, "Land")
SetRawTile(14, 2, "Land")
SetRawTile(14, 3, "Rough")
SetRawTile(15, 2, "Land")
SetRawTile(15, 3, "Rough")

-- Clear space for the Shinsplitter gold mine
SetRawTile(4, 73, "Land")
SetRawTile(4, 74, "Land")
SetRawTile(4, 75, "Land")
SetRawTile(5, 73, "Land")
SetRawTile(5, 74, "Land")
SetRawTile(5, 75, "Land")
SetRawTile(6, 73, "Land")
SetRawTile(6, 74, "Land")
SetRawTile(6, 75, "Land")

ApplyRawTiles()

-- Player Setup
SetStartView(0, 6, 5)
SetPlayerData(0, "Resources", "copper", 2000)
SetPlayerData(0, "Resources", "lumber", 2000)
SetPlayerData(0, "Resources", "stone", 2000)
SetPlayerData(0, "Resources", "oil", 0)
SetPlayerData(0, "RaceName", "dwarf")
SetPlayerData(0, "Faction", "norlund-clan")
SetAiType(0, "land-attack")
SetStartView(1, 38, 33)
SetPlayerData(1, "Resources", "copper", 2000)
SetPlayerData(1, "Resources", "lumber", 2000)
SetPlayerData(1, "Resources", "stone", 2000)
SetPlayerData(1, "Resources", "oil", 0)
SetPlayerData(1, "RaceName", "dwarf")
SetPlayerData(1, "Faction", "shorbear-clan")
SetAiType(1, "land-attack")
SetStartView(2, 5, 65)
SetPlayerData(2, "Resources", "copper", 2000)
SetPlayerData(2, "Resources", "lumber", 2000)
SetPlayerData(2, "Resources", "stone", 2000)
SetPlayerData(2, "Resources", "oil", 0)
SetPlayerData(2, "RaceName", "dwarf")
SetPlayerData(2, "Faction", "shinsplitter-clan")
SetAiType(2, "land-attack")
SetPlayerData(PlayerNumNeutral, "RaceName", "neutral")

if (GrandStrategy == false or GrandStrategyEventMap) then
	SetDiplomacy(0, "enemy", 1)
	SetDiplomacy(0, "enemy", 2)
	SetDiplomacy(1, "enemy", 0)
	SetDiplomacy(1, "allied", 2)
	SetDiplomacy(2, "enemy", 0)
	SetDiplomacy(2, "allied", 1)
end

if (GrandStrategy == false) then
	unit = CreateUnit("unit-dwarven-town-hall", 0, {5, 4})
	unit = CreateUnit("unit-dwarven-miner", 0, {6, 5})
	unit = CreateUnit("unit-dwarven-miner", 0, {6, 5})
	unit = CreateUnit("unit-dwarven-miner", 0, {6, 5})
	unit = CreateUnit("unit-dwarven-miner", 0, {6, 5})
	unit = CreateUnit("unit-dwarven-miner", 0, {6, 5})
	unit = CreateUnit("unit-dwarven-mushroom-farm", 0, {21, 1})
	unit = CreateUnit("unit-dwarven-mushroom-farm", 0, {23, 1})

	if (GetPlayerData(0, "Name") ~= "Shorbear Clan" and GetPlayerData(0, "Name") ~= "Shinsplitter Clan" and (GetThisPlayer() ~= 0 or (PlayerFaction ~= "Shorbear Clan" and PlayerFaction ~= "Shinsplitter Clan"))) then
		unit = CreateUnit("unit-dwarven-axefighter", 0, {6, 5})
		SetUnitVariable(unit, "Character", "rugnur")
		unit = CreateUnit("unit-dwarven-steelclad", 0, {6, 5})
		SetUnitVariable(unit, "Character", "baglur")
		unit = CreateUnit("unit-dwarven-thane", 0, {6, 5})
		SetUnitVariable(unit, "Character", "thursagan")
		unit = CreateUnit("unit-dwarven-thane", 0, {6, 5})
		SetUnitVariable(unit, "Character", "durstorn")

		unit = CreateUnit("unit-dwarven-pathfinder", 0, {6, 5}) -- Noiraran
		AcquireTrait(unit, "upgrade-keen") -- was loyal and intelligent in Wesnoth
		SetUnitVariable(unit, "Name", "Noiraran")
		unit = CreateUnit("unit-dwarven-steelclad", 0, {6, 5}) -- Kuhnar
		AcquireTrait(unit, "upgrade-quick") -- was loyal and quick in Wesnoth
		SetUnitVariable(unit, "Name", "Kuhnar")
		unit = CreateUnit("unit-dwarven-gryphon-rider", 0, {6, 5}) -- Krawg
		IncreaseUnitLevel(unit, 1)
		AcquireAbility(unit, "upgrade-critical-strike")
	end

	unit = CreateUnit("unit-dwarven-stronghold", 1, {37, 32})
	SetUnitVariable(unit, "Unique", "shorbear-hold")
	if (GameSettings.Difficulty >= 3) then -- if difficulty is hard or higher
		unit = CreateUnitInTransporter("unit-dwarven-scout", 1, unit)
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnitInTransporter("unit-dwarven-scout", 1, unit - 1)
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnitInTransporter("unit-dwarven-scout", 1, unit - 2)
		SetUnitVariable(unit, "Active", false)
	end
	
--	unit = CreateUnit("unit-dwarven-miner", 1, {38, 33})
--	unit = CreateUnit("unit-dwarven-miner", 1, {38, 33})
--	unit = CreateUnit("unit-dwarven-miner", 1, {38, 33})
--	unit = CreateUnit("unit-dwarven-miner", 1, {38, 33})
--	unit = CreateUnit("unit-dwarven-miner", 1, {38, 33})
	unit = CreateUnit("unit-dwarven-thane", 1, {36, 33}) -- Glonoin
	SetUnitVariable(unit, "Character", "glonoin")
	SetUnitVariable(unit, "Active", false)

	-- give a few towers to the Shorbear Clan to make their stronghold less vulnerable at game start
	unit = CreateUnit("unit-dwarven-guard-tower", 1, {29, 29})
	SetUnitVariable(unit, "Active", false)
	if (unit) then
		unit = CreateUnitInTransporter("unit-dwarven-scout", 1, unit)
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnitInTransporter("unit-dwarven-scout", 1, unit - 1)
		SetUnitVariable(unit, "Active", false)
	end
	if (GameSettings.Difficulty >= 2) then -- if difficulty is normal or higher
		unit = CreateUnit("unit-dwarven-axefighter", 1, {29, 29})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-axefighter", 1, {29, 29})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-axefighter", 1, {29, 29})
		SetUnitVariable(unit, "Active", false)
	end
	if (GameSettings.Difficulty >= 3) then -- if difficulty is hard or higher
		unit = CreateUnit("unit-dwarven-steelclad", 1, {29, 29})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-steelclad", 1, {29, 29})
		SetUnitVariable(unit, "Active", false)
	end
	if (GameSettings.Difficulty >= 4) then -- if difficulty is brutal or higher
		unit = CreateUnit("unit-dwarven-axefighter", 1, {29, 29})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-steelclad", 1, {29, 29})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-thane", 1, {29, 29})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-thane", 1, {29, 29})
		SetUnitVariable(unit, "Active", false)
	end
	
	unit = CreateUnit("unit-dwarven-guard-tower", 1, {29, 37})
	SetUnitVariable(unit, "Active", false)
	if (unit) then
		unit = CreateUnitInTransporter("unit-dwarven-scout", 1, unit)
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnitInTransporter("unit-dwarven-scout", 1, unit - 1)
		SetUnitVariable(unit, "Active", false)
	end
	if (GameSettings.Difficulty >= 2) then -- if difficulty is normal or higher
		unit = CreateUnit("unit-dwarven-axefighter", 1, {29, 37})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-axefighter", 1, {29, 37})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-axefighter", 1, {29, 37})
		SetUnitVariable(unit, "Active", false)
	end
	if (GameSettings.Difficulty >= 3) then -- if difficulty is hard or higher
		unit = CreateUnit("unit-dwarven-steelclad", 1, {29, 37})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-steelclad", 1, {29, 37})
		SetUnitVariable(unit, "Active", false)
	end
	if (GameSettings.Difficulty >= 4) then -- if difficulty is brutal or higher
		unit = CreateUnit("unit-dwarven-axefighter", 1, {29, 37})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-steelclad", 1, {29, 37})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-thane", 1, {29, 37})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-thane", 1, {29, 37})
		SetUnitVariable(unit, "Active", false)
	end
	
	unit = CreateUnit("unit-dwarven-guard-tower", 1, {38, 25})
	SetUnitVariable(unit, "Active", false)
	if (unit) then
		unit = CreateUnitInTransporter("unit-dwarven-scout", 1, unit)
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnitInTransporter("unit-dwarven-scout", 1, unit - 1)
		SetUnitVariable(unit, "Active", false)
	end
	if (GameSettings.Difficulty >= 2) then -- if difficulty is normal or higher
		unit = CreateUnit("unit-dwarven-axefighter", 1, {38, 25})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-axefighter", 1, {38, 25})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-axefighter", 1, {38, 25})
		SetUnitVariable(unit, "Active", false)
	end
	if (GameSettings.Difficulty >= 3) then -- if difficulty is hard or higher
		unit = CreateUnit("unit-dwarven-steelclad", 1, {38, 25})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-steelclad", 1, {38, 25})
		SetUnitVariable(unit, "Active", false)
	end
	if (GameSettings.Difficulty >= 4) then -- if difficulty is brutal or higher
		unit = CreateUnit("unit-dwarven-axefighter", 1, {38, 25})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-steelclad", 1, {38, 25})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-thane", 1, {38, 25})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-thane", 1, {38, 25})
		SetUnitVariable(unit, "Active", false)
	end
	
	unit = CreateUnit("unit-dwarven-guard-tower", 1, {47, 29})
	SetUnitVariable(unit, "Active", false)
	if (unit) then
		unit = CreateUnitInTransporter("unit-dwarven-scout", 1, unit)
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnitInTransporter("unit-dwarven-scout", 1, unit - 1)
		SetUnitVariable(unit, "Active", false)
	end
	if (GameSettings.Difficulty >= 2) then -- if difficulty is normal or higher
		unit = CreateUnit("unit-dwarven-axefighter", 1, {47, 29})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-axefighter", 1, {47, 29})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-axefighter", 1, {47, 29})
		SetUnitVariable(unit, "Active", false)
	end
	if (GameSettings.Difficulty >= 3) then -- if difficulty is hard or higher
		unit = CreateUnit("unit-dwarven-steelclad", 1, {47, 29})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-steelclad", 1, {47, 29})
		SetUnitVariable(unit, "Active", false)
	end
	if (GameSettings.Difficulty >= 4) then -- if difficulty is brutal or higher
		unit = CreateUnit("unit-dwarven-axefighter", 1, {47, 29})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-steelclad", 1, {47, 29})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-thane", 1, {47, 29})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-thane", 1, {47, 29})
		SetUnitVariable(unit, "Active", false)
	end
	
	unit = CreateUnit("unit-dwarven-guard-tower", 1, {47, 35})
	SetUnitVariable(unit, "Active", false)
	if (unit) then
		unit = CreateUnitInTransporter("unit-dwarven-scout", 1, unit)
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnitInTransporter("unit-dwarven-scout", 1, unit - 1)
		SetUnitVariable(unit, "Active", false)
	end
	if (GameSettings.Difficulty >= 2) then -- if difficulty is normal or higher
		unit = CreateUnit("unit-dwarven-axefighter", 1, {47, 35})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-axefighter", 1, {47, 35})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-axefighter", 1, {47, 35})
		SetUnitVariable(unit, "Active", false)
	end
	if (GameSettings.Difficulty >= 3) then -- if difficulty is hard or higher
		unit = CreateUnit("unit-dwarven-steelclad", 1, {47, 35})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-steelclad", 1, {47, 35})
		SetUnitVariable(unit, "Active", false)
	end
	if (GameSettings.Difficulty >= 4) then -- if difficulty is brutal or higher
		unit = CreateUnit("unit-dwarven-axefighter", 1, {47, 35})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-steelclad", 1, {47, 35})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-thane", 1, {47, 35})
		SetUnitVariable(unit, "Active", false)
		unit = CreateUnit("unit-dwarven-thane", 1, {47, 35})
		SetUnitVariable(unit, "Active", false)
	end

	-- Give the Shorbear Hold a few other buildings which are appropriate
	unit = CreateUnit("unit-dwarven-barracks", 1, {31, 33})
	unit = CreateUnit("unit-dwarven-smithy", 1, {43, 28})
	unit = CreateUnit("unit-dwarven-lumber-mill", 1, {62, 27})
	unit = CreateUnit("unit-dwarven-mushroom-farm", 1, {32, 30})
	unit = CreateUnit("unit-dwarven-mushroom-farm", 1, {40, 28})
	unit = CreateUnit("unit-dwarven-mushroom-farm", 1, {44, 36})

	unit = CreateUnit("unit-dwarven-town-hall", 2, {4, 64})
	unit = CreateUnit("unit-dwarven-miner", 2, {10, 65}) -- only one miner so that they start slower (was originally placed at {5, 65}, but let's place him a bit farther to east to make sure he isn't bounded in a complex of the hall+trees
	unit = CreateUnit("unit-dwarven-thane", 2, {2, 70}) -- Lyndar
	SetUnitVariable(unit, "Active", false)
--	unit = CreateUnit("unit-dwarven-mushroom-farm", 2, {0, 70})
elseif (GrandStrategyEventMap) then
	SetPlayerData(0, "Resources", "copper", 0)
	SetPlayerData(0, "Resources", "lumber", 0)
	SetPlayerData(0, "Resources", "stone", 0)
	SetAiType(0, "grand-strategy-battle")
	SetAiType(1, "passive")
	SetAiType(2, "grand-strategy-battle")
	
	unit = CreateUnit("unit-dwarven-town-hall", 0, {5, 4})
	unit = CreateUnit("unit-dwarven-mushroom-farm", 0, {21, 1})
	unit = CreateUnit("unit-dwarven-mushroom-farm", 0, {23, 1})

	-- Rugnur
	if (GetProvinceHero("Caverns of Chaincolt", "Rugnur") == 2) then
		unit = CreateUnit(GetGrandStrategyHeroUnitType("Rugnur"), 0, {6, 5})
		SetUnitVariable(unit, "Character", "rugnur")
	end

	-- Baglur
	if (GetProvinceHero("Caverns of Chaincolt", "Baglur") == 2) then
		unit = CreateUnit(GetGrandStrategyHeroUnitType("Baglur"), 0, {6, 5})
		SetUnitVariable(unit, "Character", "baglur")
	end

	-- Thursagan
	if (GetProvinceHero("Caverns of Chaincolt", "Thursagan") == 2) then
		unit = CreateUnit(GetGrandStrategyHeroUnitType("Thursagan"), 0, {6, 5})
		SetUnitVariable(unit, "Character", "thursagan")
	end

	-- Durstorn
	if (GetProvinceHero("Caverns of Chaincolt", "Durstorn") == 2) then
		unit = CreateUnit(GetGrandStrategyHeroUnitType("Durstorn"), 0, {6, 5})
		SetUnitVariable(unit, "Character", "durstorn")
	end
	
	-- Gnomish Envoy
	if (GetProvinceUnitQuantity("Caverns of Chaincolt", "unit-gnomish-duelist") >= 1) then
		unit = OldCreateUnit("unit-gnomish-duelist", 0, {6, 5})
		ChangeProvinceUnitQuantity("Caverns of Chaincolt", "unit-gnomish-duelist", -1)
	end
	
	-- Norlund units
	CreateProvinceUnits("Caverns of Chaincolt", 0, 1, false, true)
	CreateProvinceCustomHero("Caverns of Chaincolt", 0)

	-- Shinsplitters
	CreateProvinceUnits("Southern Tunnels", 2, 4, false, true)
	CreateProvinceCustomHero("Southern Tunnels", 2)
	if (GetNumUnitsAt(GetFactionPlayer("Shinsplitter Clan"), "unit-dwarven-thane", {0, 0}, {256, 256}) < 1 and GetProvinceUnitQuantity("Southern Tunnels", "unit-dwarven-thane") >= 1) then
		unit = CreateUnit("unit-dwarven-thane", 1, {Players[1].StartPos.x, Players[1].StartPos.y})
		SetUnitVariable(unit, "Active", false)
		ChangeProvinceUnitQuantity("Southern Tunnels", "unit-dwarven-thane", -1)
	end

	unit = CreateUnit("unit-dwarven-stronghold", 1, {37, 32})
	SetUnitVariable(unit, "Unique", "shorbear-hold")

	-- Shorbears
	CreateProvinceUnits("Shorbear Hills", 1)
	CreateProvinceCustomHero("Shorbear Hills", 1)
	
	local uncount = 0
	uncount = GetUnits(GetFactionPlayer("Shorbear Clan"))
	for unit1 = 1,table.getn(uncount) do 
		if (GetUnitVariable(uncount[unit1], "Ident") == "unit-dwarven-thane") then
			SetUnitVariable(uncount[unit1], "Name", "Glonoin")
			SetUnitVariable(unit, "Active", false)
			break
		end
	end
		
	unit = CreateUnit("unit-dwarven-sentry-tower", 1, {29, 29})
	unit = CreateUnit("unit-dwarven-sentry-tower", 1, {29, 37})
	unit = CreateUnit("unit-dwarven-sentry-tower", 1, {38, 25})
	unit = CreateUnit("unit-dwarven-sentry-tower", 1, {47, 29})
	unit = CreateUnit("unit-dwarven-sentry-tower", 1, {47, 35})

	-- Give the Shorbear Hold a few other buildings which are appropriate
	unit = CreateUnit("unit-dwarven-barracks", 1, {31, 33})
	unit = CreateUnit("unit-dwarven-smithy", 1, {43, 28})
	unit = CreateUnit("unit-dwarven-lumber-mill", 1, {62, 27})
	unit = CreateUnit("unit-dwarven-mushroom-farm", 1, {32, 30})
	unit = CreateUnit("unit-dwarven-mushroom-farm", 1, {40, 28})
	unit = CreateUnit("unit-dwarven-mushroom-farm", 1, {44, 36})
end

unit = CreateUnit("unit-copper-deposit", PlayerNumNeutral, {34, 40}) -- Shorbear Hold Gold Mine
SetResourcesHeld(unit, 100000)
unit = CreateUnit("unit-copper-rock", PlayerNumNeutral, {35, 41})
unit = CreateUnit("unit-copper-rock", PlayerNumNeutral, {35, 41})
unit = CreateUnit("unit-copper-rock", PlayerNumNeutral, {35, 41})
unit = CreateUnit("unit-copper-rock", PlayerNumNeutral, {35, 41})
unit = CreateUnit("unit-copper-rock", PlayerNumNeutral, {35, 41})
unit = CreateUnit("unit-copper-deposit", PlayerNumNeutral, {13, 0}) -- Norlund Gold Mine
SetResourcesHeld(unit, 50000)
unit = CreateUnit("unit-copper-rock", PlayerNumNeutral, {14, 11})
unit = CreateUnit("unit-copper-rock", PlayerNumNeutral, {14, 11})
unit = CreateUnit("unit-copper-rock", PlayerNumNeutral, {14, 11})
unit = CreateUnit("unit-copper-rock", PlayerNumNeutral, {14, 11})
unit = CreateUnit("unit-copper-rock", PlayerNumNeutral, {14, 11})
unit = CreateUnit("unit-copper-deposit", PlayerNumNeutral, {4, 73}) -- Shinsplitter Gold Mine
SetResourcesHeld(unit, 50000)
unit = CreateUnit("unit-copper-rock", PlayerNumNeutral, {5, 74})
unit = CreateUnit("unit-copper-rock", PlayerNumNeutral, {5, 74})
unit = CreateUnit("unit-copper-rock", PlayerNumNeutral, {5, 74})
unit = CreateUnit("unit-copper-rock", PlayerNumNeutral, {5, 74})
unit = CreateUnit("unit-copper-rock", PlayerNumNeutral, {5, 74})
unit = CreateUnit("unit-copper-deposit", PlayerNumNeutral, {68, 61}) -- 2nd Shinsplitter Gold Mine
SetResourcesHeld(unit, 50000)
unit = CreateUnit("unit-copper-rock", PlayerNumNeutral, {69, 62})
unit = CreateUnit("unit-copper-rock", PlayerNumNeutral, {69, 62})
unit = CreateUnit("unit-copper-rock", PlayerNumNeutral, {69, 62})
unit = CreateUnit("unit-copper-rock", PlayerNumNeutral, {69, 62})
unit = CreateUnit("unit-copper-rock", PlayerNumNeutral, {69, 62})
unit = CreateUnit("unit-copper-deposit", PlayerNumNeutral, {41, 0}) -- 3rd Shinsplitter Gold Mine
SetResourcesHeld(unit, 50000)
unit = CreateUnit("unit-copper-rock", PlayerNumNeutral, {42, 1})
unit = CreateUnit("unit-copper-rock", PlayerNumNeutral, {42, 1})
unit = CreateUnit("unit-copper-rock", PlayerNumNeutral, {42, 1})
unit = CreateUnit("unit-copper-rock", PlayerNumNeutral, {42, 1})
unit = CreateUnit("unit-copper-rock", PlayerNumNeutral, {42, 1})

unit = CreateUnit("unit-glyph", PlayerNumNeutral, {69, 14}) -- cave entrance marker

CreateCritters()

CreateRoamingFog((Map.Info.MapWidth * Map.Info.MapHeight) / 4096)

CreateNeutralBuildings("unit-tree-stump", (Map.Info.MapWidth * Map.Info.MapHeight) / 4096, 0, Map.Info.MapWidth - 2, 0, Map.Info.MapHeight - 2, false)

-- in a grand strategy battle, give the defender two guard towers if a stronghold is built
if (GrandStrategy and GrandStrategyEventMap == false and ProvinceHasBuildingClass(AttackedProvince.Name, "stronghold")) then
	if (GetCivilizationClassUnitType("guard-tower", GetProvinceCivilization(AttackedProvince.Name)) ~= nil) then
		unit = OldCreateUnit(GetCivilizationClassUnitType("guard-tower", GetProvinceCivilization(AttackedProvince.Name)), MapDefender, {29, 29})
		unit = OldCreateUnit(GetCivilizationClassUnitType("guard-tower", GetProvinceCivilization(AttackedProvince.Name)), MapDefender, {47, 35})
	end
end
